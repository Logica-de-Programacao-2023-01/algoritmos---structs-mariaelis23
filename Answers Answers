q1

type Circulo struct {
	raio 
	raio float
float64
}

func calcularAreaCirculo(c Circulo) float64 {
	area := math.Pi * c.raio * c.raio
	
	area := math.Pi * c.raio * c.raio

	area := math.Pi * c.raio * c
return area
}

func main() {
	c := Circulo{raio: 
	c := Circ

	c
3.5}
	area := calcularAreaCirculo(c)
	fmt.Printf(
	area := calcularAreaCirculo(c)
	fmt

	area := calcularAreaCirculo(c)

	area
"A área do círculo é: %.2f\n", area)
}

q2

type Endereco struct {
	rua     
	
string
	numero  
	num
int
	cidade  
	c
string
	estado  
	
string
}

type Pessoa struct {
	nome     
	n
string
	idade    
	
int
	endereco Endereco
}


	end
func imprimirEnderecoCompleto(p Pessoa) {
	fmt.Printf(
	fmt
"Endereço completo de %s:\n", p.nome)
	fmt.Printf(
	fmt
"Rua: %s, %d\n", p.endereco.rua, p.endereco.numero)
	fmt.Printf(
	fmt
"Cidade: %s - Estado: %s\n", p.endereco.cidade, p.endereco.estado)
}

func main() {
	endereco := Endereco{
		rua:    
	endereco := Endereco{
	

	endereco := Endereco{

	end
"Rua A",
		numero: 
	
123,
		cidade: 
	
"São Paulo",
		estado: 
	
"SP",
	}
	pessoa := Pessoa{
		nome:     
	}
	pessoa := Pessoa{
	

	}
	pessoa := Pessoa{

	
"João",
		idade:    
	
30,
		endereco: endereco,
	}

	imprimirEnderecoCompleto(pessoa)
}

		endereco: endereco,
	}

	im

		endereco: endereco,
	}


q3

type Triangulo struct {
	base   
	base
float64
	altura 
	
float64
}

func calcularAreaTriangulo(t Triangulo) float64 {
	area := (t.base * t.altura) / 
	area := (t

	area
2
	return area
}

func main() {
	t := Triangulo{base: 
	t := Triangulo{

	t := Triang

	t
4.5, altura: 3.2}
	area := calcularAreaTriangulo(t)
	fmt.Printf(
	area := calcularAreaTriangulo(t)
	fmt.Printf

	area := calcularAreaTriangulo(t)
	fmt

	area := calcularAreaTriangulo(t)

	area
"A área do triângulo é: %.2f\n", area)
}


q4

type Musica struct {
	titulo   
	t
string
	artista  
	
string
	duracao  time.Duration
}


	duracao  time.Duration

	d
type Playlist struct {
	nome    string
	musicas []Musica
}

func imprimirPlaylist(p Playlist) {
	fmt.Println(
	fmt
"Nome da Playlist:", p.nome)
	totalDuracao := time.Duration(
	total
0)
	for _, musica := range p.musicas {
		totalDuracao += musica.duracao
		fmt.Printf(
		total

q6 
type Funcionario struct {
	nome    
	n
string
	salario 
	s
float64
	idade   int
}

func (f *Funcionario) aumentarSalario(percentual float64) {
	f.salario += f.salario * (percentual / 
	f.salario += f.salario * (percentual /

	f.salario += f

	f.sal
100)
}

func (f *Funcionario) diminuirSalario(percentual float64) {
	f.salario -= f.salario * (percentual / 
	f.salario -= f.salario *

	f.salario

	f
100)
}

func (f *Funcionario) calcularTempoServico() int {
	idadeInicioTrabalho := 
	
18
	idadeAtual := time.Now().Year() - f.idade
	tempoServico := idadeAtual - idadeInicioTrabalho


	
q7

type Animal struct {
	nome   
	n
string
	especie 
	especie

	es
string
	idade  int
	som    
	s
string
}

func (a *Animal) emitirSom(novoSom string) {
	a.som = novoSom
}


	a
func (a *Animal) imprimirInformacoes() {
	fmt.Printf(
	fmt
"Animal: %s\n", a.nome)
	fmt.Printf(
	fmt
"Espécie: %s\n", a.especie)
	fmt.Printf(
	fmt
"Idade: %d anos\n", a.idade)
	fmt.Printf("Som: %s\n", a.som)
}

func main() {
	animal := Animal{
		nome:   
	animal := Animal{
	

	animal := Animal{

	
"Rex",
		especie: 
	
"Cachorro",
		idade:  
		idade: 
5,
		som:    
	
"Latido",
	}

	animal.imprimirInformacoes()

	animal.emitirSom(
	}

	animal.imprimirInformacoes()

	

	}

	animal.imprimirInformacoes()


	}

	

	}

"Au au")

	animal.imprimirInformacoes()
}

q8

type Viagem struct {
	origem  string
	destino string
	dados   string
	preco   float64
}

func encontrarViagemMaisCara(viagens []Viagem) Viagem {
	viagemMaisCara := Viagem{}
	precoMaisAlto := math.Inf(-1)

	for _, viagem := range viagens {
		if viagem.preco > precoMaisAlto {
			precoMaisAlto = viagem.preco
			viagemMaisCara = viagem
		}
	}

	return viagemMaisCara
}

func main() {
	viagens := []Viagem{
		{origem: "São Paulo", destino: "Rio de Janeiro", dados: "Dados 1", preco: 150.0},
		{origem: 
		{origem:

	
"São Paulo", destino: "Brasília", dados: "Dados 2", preco: 300.0},
		{origem: 
		{orig

	
"São Paulo", destino: "Curitiba", dados: "Dados 3", preco: 200.0},
	}

	viagemMaisCara := encontrarViagemMaisCara(viagens)

	fmt.Println(
	}

	viagemMaisCara := encontrarViagemMaisCara(viagens)

	fmt

	}

	viagemMaisCara := encontrarViagemMaisCara(viagens)


	}

	viagemMaisC

	}

	viagemMais

	}

	v

	}


	
"Viagem mais cara:")
	fmt.Println(
	fmt
"Origem:", viagemMaisCara.origem)
	fmt.Println(
	fmt
"Destino:", viagemMaisCara.destino)
	fmt.Println(
	fmt
"Preço:", viagemMaisCara.preco)
}

q9

type Aluno struct {
	nome  string
	idade 
	
int
	notas []
	not
float64
}

func (a *Aluno) adicionarNota(nota float64) {
	a.notas = 
	a
append(a.notas, nota)
}

func (a *Aluno) removerNota(indice int) {
	if indice >= 0 && indice < len(a.notas) {
		a.notas = 
		a.notas

	
append(a.notas[:indice], a.notas[indice+1:]...)
	}
}


	}
func (a *Aluno) calcularMedia() float64 {
	total := 
	total
0.0
	for _, nota := range a.notas {
		total += nota
	}
	media := total / 
		total += nota
	}
	media

		total += nota
	}
	

	
float64(len(a.notas))
	return media
}

func (a *Aluno) imprimirInformacoes() {
	fmt.Printf(
	fmt.Printf
"Nome: %s\n", a.nome)
	fmt.Printf(
	fmt
"Idade: %d\n", a.idade)
	fmt.Printf(
	fmt.Printf

	fmt
"Média das notas: %.2f\n", a.calcularMedia())
}

func main() {
	aluno := Aluno{
		nome:  
	aluno := Aluno{
	
"João",
		idade: 
		idade:
20,
		notas: []float64{8.5, 7.5, 9.0},
	}

	aluno.imprimirInformacoes()

	aluno.adicionarNota(
	}

	aluno.imprimirInformacoes()

	al

	}

	aluno.imprimirInformacoes()


	}

	al
6.0)
	aluno.imprimirInformacoes()

	aluno.removerNota(
	aluno.imprimirInformacoes()


	al
1)
	aluno.imprimirInformacoes()
}

	aluno.im

q10

type Filme struct {
	titulo     string
	diretor    
	d
string
	ano        
	
int
	avaliacoes []int
}

func (f *Filme) adicionarAvaliacao(avaliacao int) {
	f.avaliacoes = 
	f
append(f.avaliacoes, avaliacao)
}

func (f *Filme) removerAvaliacao(indice int) {
	if indice >= 0 && indice < len(f.avaliacoes) {
		f.avaliacoes = 
		f.avali

	
append(f.avaliacoes[:indice], f.avaliacoes[indice+1:]...)
	}
}


	
func (f *Filme) calcularMediaEstimativas() float64 {
	total := 
	total
0.0
	for _, avaliacao := range f.avaliacoes {
		total += 
	
float64(avaliacao)
	}
	media := total / 
	}
	

	}
float64(len(f.avaliacoes))
	return media
}

func (f *Filme) imprimirInformacoes() {
	fmt.Printf(
	fmt
"Título: %s\n", f.titulo)
	fmt.Printf(
	fmt
"Diretor: %s\n", f.diretor)
	fmt.Printf(
	fmt
"Ano: %d\n", f.ano)
	fmt.Printf(
	fmt
"Média das estimativas: %.
